syntax = "proto3";

import "proto/modules.proto";
import "proto/transaction.proto";

package slog.internal;

message Region {
    // List of all server addresses in the system.
    // This list must have the size equal to number of partitions
    // If protocol is "tcp", these are IP addresses.
    // If protocol is "icp", these are filesystem paths.
    repeated string addresses = 1;
    // AWS public addresses for the servers. This field is only used by the admin tool.
    // If not specified, the addresses field is used instead.
    repeated string public_addresses = 2;
    // List of machines used for benchmarking. This field is only used by the admin tool
    repeated string client_addresses = 3;
    // Comma-separated string of region id (e.g "1,3,2") ordered from closest region to
    // furthest region, not including this region. This field is only used by the admin tool.
    string distance_ranking = 4;
    // Number of replicas in this region. The number of addresses in this region must equal to
    // num_replicas * num_partitions. The addresses list is split into num_replicas groups.
    // Each group has num_partitions addresses.
    uint32 num_replicas = 5;
    // Use synchronous replication across all replicas
    bool sync_replication = 6;
    // Reduce the resources of MH orderer to simulate resource constraint
    bool shrink_mh_orderer = 7;
}

message ReplicationDelayExperiment {
    // Percent of batches that are delayed
    uint32 delay_pct = 1;
    // Average duration of delay in milliseconds
    uint32 delay_amount_ms = 2;
}

/**
 * With hash partitioning, each key is interpreted as a byte string.
 * The keys are distributed to the partitions based on their
 * hash values.
 * Initial data can be loaded from an external file.
 */
message HashPartitioning {
    // Number of prefix bytes of a key to use for partitioning
    uint32 partition_key_num_bytes = 1;
}

/**
 * With simple partitioning, each key is assumed to be a number.
 * The keys are distributed to the partitions based on key values
 * modulo the number of partitions. 
 * Initial data cannot be loaded from an external file but can be
 * generated at startup. The following is an example of home and partition
 * assignment of the generated data with 3 partitions and 4 regions.
 *
 *        home | 0  1  2  3  0  1  2  3  0  ...
 * ------------|-------------------------------
 * partition 0 | 0  3  6  9  12 15 18 21 24 ...
 * partition 1 | 1  4  7  10 13 16 19 22 25 ...
 * partition 2 | 2  5  8  11 14 17 20 23 26 ...
 * ------------|-------------------------------
 *             |            keys            
 */
message SimplePartitioning {
    // Number of records to generate
    uint64 num_records = 1;
    // Size of a generated record in bytes
    uint32 record_size_bytes = 2;
}

/**
 * With simple partitioning, each key is assumed to be a number.
 * The keys are distributed to the regions based on key values
 * modulo the number of regions. 
 * Initial data cannot be loaded from an external file but can be
 * generated at startup. The following is an example of home and partition
 * assignment of the generated data with 3 partitions and 4 regions.
 *
 *   partition | 0  1  2  3  0  1  2  3  0  ...
 * ------------|-------------------------------
 *      home 0 | 0  3  6  9  12 15 18 21 24 ...
 *      home 1 | 1  4  7  10 13 16 19 22 25 ...
 *      home 2 | 2  5  8  11 14 17 20 23 26 ...
 * ------------|-------------------------------
 *             |            keys            
 */
message SimplePartitioning2 {
    // Number of records to generate
    uint64 num_records = 1;
    // Size of a generated record in bytes
    uint32 record_size_bytes = 2;
}

/**
 * Similar to simple partitioning but instead of using the whole key, only the warehouse id
 * portion of the key is used for partitioning.
 */
message TPCCPartitioning {
    // Number of warehouses
    int32 warehouses = 1;
}

message CpuPinning {
    ModuleId module = 1;
    uint32 cpu = 2;
}

message MetricOptions {
    uint32 txn_events_sample = 1;
    uint32 deadlock_resolver_runs_sample = 2;
    uint32 deadlock_resolver_deadlocks_sample = 3;
    bool deadlock_resolver_deadlock_details = 4;
    uint32 forw_sequ_latency_sample = 5;
    uint32 clock_sync_sample = 6;
    bool logs = 7;
    uint32 forwarder_batch_sample = 8;
    uint32 sequencer_batch_sample = 9;
    uint32 mhorderer_batch_sample = 10;
    uint32 txn_timestamp_sample = 11;
    uint32 generic_sample = 12;
}

enum ExecutionType {
    KEY_VALUE = 0;
    NOOP = 1;
    TPC_C = 2;
}

/**
 * The schema of a configuration file.
 */
message Configuration {
    // Protocol for the zmq sockets in the broker. Use "tcp" for
    // normal running and "icp" for unit and integration tests
    string protocol = 1;
    // Region groups. Each group has a list of machine addresses
    // with the size equal to number of partitions
    repeated Region regions = 2;
    // Port for the zmq sockets in the broker. Each value will create a new broker thread
    repeated uint32 broker_ports = 3;
    // Port for the server
    uint32 server_port = 4;
    // Port for the forwarder
    uint32 forwarder_port = 5;
    // Port for the sequencer
    uint32 sequencer_port = 6;
    // Port for clock synchronizer. Set to 0 to disable clock synchronization
    uint32 clock_synchronizer_port = 7;
    // Number of partitions per replica
    uint32 num_partitions = 8;
    // Partitioning scheme
    oneof partitioning {
        HashPartitioning hash_partitioning = 9;
        SimplePartitioning simple_partitioning = 10;
        SimplePartitioning2 simple_partitioning2 = 11;
        TPCCPartitioning tpcc_partitioning = 12;
    }
    // Number of worker threads for processing the transactions
    uint32 num_workers = 13;
    // Number of log manager threads. The logs are distributed evenly among these threads
    uint32 num_log_managers = 14;
    // How long the mh orderer waits for batching
    uint64 mh_orderer_batch_duration = 15;
    // How long the forwarder waits for batching
    uint64 forwarder_batch_duration = 16;
    // How long the sequencer waits for batching
    uint64 sequencer_batch_duration = 17;
    // How big can a batch be in number of txns
    int32 sequencer_batch_size = 18;
    // By default, a sequencer sticks to a single partition of a region to send the batch to.
    // If this option is true, the partitions are selected in a round-robin manner (rrr: round-robin replication).
    bool sequencer_rrr = 19;
    // Number of regions that need to be synchronously replicated to
    uint32 replication_factor = 20;
    // Order of regions for synchronous replication. This is a list of strings each of which corresponds
    // to a region. Each string is an ordered comma-separated list of region ids that the current replica
    // will synchronously replicate to based on replication order. The current region will be ignored if exists
    // in the list. For example, ['1,2', '2,1,0', ''] means that, with a replication factor of 3, region 0 will
    // synchronously replicate to 1 and 2, region 1 will replicate to 2 and 0, and region 2 will not synchronously
    // replicate to anywhere.
    repeated string replication_order = 21;
    // Replication of txn batches will be delayed to simulate uneven network latency
    ReplicationDelayExperiment replication_delay = 22;
    // Do not record specified events
    repeated TransactionEvent enabled_events = 23;
    // For multi-home txn, send lock-only txns directly to the regions, skipping the global orderer
    bool bypass_mh_orderer = 24;
    // Skip check when bypass mh orderer
    bool force_bypass_mh_orderer = 25;
    // Deadlock checking/resolving interval in ms. Set to 0 to disable deadlock resolving thread
    uint64 ddr_interval = 26;
    // Pin each module to a cpu
    repeated CpuPinning cpu_pinnings = 27;
    // Transaction execution type 
    ExecutionType execution_type = 28;
    // For each MH transaction, the involved regions will wait in such a way that their respective lock-only 
    // txns are put into the batches at approximately the same time
    bool synchronized_batching = 29;
    // Options for metrics
    MetricOptions metric_options = 30;
    // The forwarder sends probes to the sequencer to measure latency between current region and other regions on a set
    // interval. This interval is in ms.
    uint64 fs_latency_interval = 31;
    // Interval in ms for clock synchronizer to send messages
    uint64 clock_sync_interval = 32;
    // A txn is assigned a future timestamp, which will be equal to current time + latency to the furthest
    // region. When a txn arrives at a region, we want it to wait for a bit so that it can see other txns with
    // lower timestamp and get ordered after them. However, clocks are not perfectly synchronized and latency 
    // estimation may be off. The txn may arrive at a region A when time at A has already passed the txn's
    // timestamp. This value is thus used to extend the time a txn might be buffered at a region.
    int64 timestamp_buffer_us = 33;
    // Rolling window size used to average the latency measurement
    uint32 avg_latency_window_size = 34;
    // Kernel receiving buffer size (bytes) of a broker socket
    int32 broker_rcvbuf = 35;
    // Kernel sending buffer size (bytes) of long-distance sockets (e.g. those in the Forwarder and Sequencer)
    int32 long_sender_sndbuf = 36;
    // Transaction admission rate limit at each server
    int32 tps_limit = 37;
}